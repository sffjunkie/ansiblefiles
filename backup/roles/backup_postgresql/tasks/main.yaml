---
- name: Backup | Postgres | Get Postgresql version
  become_user: postgres
  community.postgresql.postgresql_info:
    filter: version
  register: _pg_server_version

- name: Backup | Postgres | Install postgresql tools
  ansible.builtin.include_role:
    name: postgresql_tools
    vars:
      postgresql_version: "{{ _pg_server_version.full }}"

- name: Backup | Postgres | Create backup directory
  become_user: "{{ db_backup_user }}"
  ansible.builtin.tempfile:
    prefix: postgresql
    state: directory
  register: _pg_tmp_dir
  notify:
    - Delete temporary files
  changed_when: false

- name: Backup | Postgres | Backup databases
  become_user: "{{ db_backup_user }}"
  block:
    - name: Backup | Postgres | Create .pgpass file
      ansible.builtin.copy:
        path: "{{ '~/.pgpass' | expanduser }}"
        state: present
        content: "{{ host }}:*:{{ item.name }}:{{ item.username }}:{{ item.password }}"
        mode: 0640
        force: true
      loop: "{{ backup_databases }}"

    - name: Debug
      ansible.builtin.debug:
        msg: "Backing up PostgreSQL database {{ item.name }}"
        verbosity: 1
      loop: "{{ backup_databases }}"

    - name: Backup | Postgres | Dump database
      ansible.builtin.shell:
        cmd: |
          "pg_dump --host=127.0.0.1 --username={{ item.username }} {{ item.name }} >"
          "{{ _pg_tmp_dir.path }}/pgdump/{{ item.name }}.dump"
      changed_when: true
      loop: "{{ backup_databases }}"

    - name: Backup | Postgres | Copy dump to destination
      ansible.builtin.copy:
        remote_src: true
        src: "{{ _pg_tmp_dir.path }}/pgdump/{{ item.name }}.dump"
        dest: "{{ dest }}"
        mode: 0644
      loop: "{{ backup_databases }}"
