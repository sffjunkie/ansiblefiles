# yaml-language-server: $schema=./build.yaml
---
- name: Build nocloud configs and image
  hosts: localhost
  vars_files:
    - ./vars/cloud_config.yaml
    - ./vars/extra_config.yaml

  pre_tasks:
    - name: Install genisoimage and whois (for the mkpasswd command)
      become: true
      ansible.builtin.package:
        name:
          - genisoimage
          - whois
        state: present
      tags:
        - image

    - name: Set the required cloud-utils packages on OSs that are not Redhat
      when: ansible_os_family != 'Redhat'
      ansible.builtin.set_fact:
        cloud_image_utils_packages:
          - cloud-utils
      tags:
        - image

    - name: Set the required cloud-utils packages for Redhat
      when: ansible_os_family == 'Redhat'
      ansible.builtin.set_fact:
        cloud_image_utils_packages:
          - cloud-utils
          - cloud-utils-growpart
      tags:
        - image

    - name: Install cloud-image-utils
      become: true
      ansible.builtin.package:
        name: "{{ cloud_image_utils_packages }}"
        state: present
      tags:
        - image

  tasks:
    - name: Extra user_config from file
      block:
        - name: Get extra user_config file name
          ansible.builtin.set_fact:
            _extra_user_config_file_name: extra_user_config[1:]

        - name: Check extra user_config file exists
          ansible.builtin.stat:
            path: "{{ _extra_user_config_file_name }}"
          register: _extra_user_config_exists

        - name: Get any extra user_config from a file
          when: _extra_user_config_exists.stat.exists
          ansible.builtin.set_fact:
            extra_user_config: "{{ lookup('file', _extra_user_config_file_name) }}"

      when: extra_user_config | length > 0 and extra_user_config[0] == '@'

    - name: Extra meta_config from file
      block:
        - name: Get extra meta_config file name
          ansible.builtin.set_fact:
            _extra_meta_config_file_name: extra_meta_config[1:]

        - name: Check extra meta_config file exists
          ansible.builtin.stat:
            path: "{{ _extra_meta_config_file_name }}"
          register: _extra_meta_config_exists

        - name: Get any extra meta_config from a file
          when: _extra_meta_config_exists.stat.exists
          ansible.builtin.set_fact:
            extra_meta_config: "{{ lookup('file', _extra_meta_config_file_name) }}"

      when: extra_meta_config | length > 0 and extra_meta_config[0] == '@'

    - name: Include secrets.yaml
      ansible.builtin.include_vars:
        file: secrets.yaml
      register: _include_secrets
      failed_when: false

    - name: Assert default_user exists if user_data.use_default is true
      assert:
        that: not user_data.use_default or (user_data.use_default and default_user is defined)
      changed_when: false

    - name: Set default _config_name_str
      ansible.builtin.set_fact:
        _config_name_str: "cloud-config"
      changed_when: false

    - name: Set config_name
      when: cli_config_name | default('', True) != ''
      ansible.builtin.set_fact:
        _config_name_str: "{{ _config_name_str }}-{{ cli_config_name }}"
      changed_when: false

    - name: Set config_name
      when: "'config_name' in hostvars[inventory_hostname] and not cli_config_name is defined"
      ansible.builtin.set_fact:
        _config_name_str: "{{ _config_name_str }}-{{ hostvars[inventory_hostname]['config_name'] }}"
      changed_when: false

    - name: Determine whether to use date
      when: cli_use_date is defined and cli_use_date | bool == true
      ansible.builtin.set_fact:
        use_date: true

    - name: If using date
      when: use_date == true
      block:
        - name: Get date
          ansible.builtin.command:
            cmd: date +"%Y-%m-%d"
          register: _date
          changed_when: false

        - name: Set date string
          ansible.builtin.set_fact:
            _config_name_str: "{{ _config_name_str }}-{{ _date.stdout }}"
          changed_when: false

    - name: Calc image name
      ansible.builtin.set_fact:
        image_path: "./build/images/{{ _config_name_str }}.img"
      changed_when: false

    - name: Set config paths
      ansible.builtin.set_fact:
        user_config_path: ./build/configs/{{ _config_name_str }}-user.yaml
        meta_config_path: ./build/configs/{{ _config_name_str }}-meta.yaml
      changed_when: false

    - name: Build cloud config
      ansible.builtin.include_role:
        name: build_cloud_config
      vars:
        extra_user_config: "{{ extra_user_config }}"
        extra_meta_config: "{{ extra_meta_config }}"
      tags:
        - config

    - name: Build cloud config image
      ansible.builtin.include_role:
        name: build_cloud_config_image
      tags:
        - image

- name: Copy nocloud image and configs
  hosts: vm_nodes_test  # TODO: Replace with vm_nodes when ready
  become: true
  tags:
    - copy

  tasks:
    - name: Copy images
      ansible.builtin.copy:
        src: "{{ hostvars['localhost']['image_path'] }}"
        dest: ~/images/

    - name: Copy user config
      ansible.builtin.copy:
        src: "{{ hostvars['localhost']['user_config_path'] }}"
        dest: ~/snippets/

    - name: Copy meta config
      ansible.builtin.copy:
        src: "{{ hostvars['localhost']['meta_config_path'] }}"
        dest: ~/snippets/
