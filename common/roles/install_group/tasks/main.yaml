# Install packages in this order; os, pip and pipx
---
- name: Debug packages
  ansible.builtin.debug:
    msg:
      - "{{ group.package | default('No packages') }}"
      - "{{ group.pip | default('No pip packages') }}"
      - "{{ group.pipx | default('No pipx packages') }}"
      - "{{ group.git | default('No git packages') }}"
      - "{{ group.npm | default('No npm packages') }}"
    verbosity: 1

- name: Install Group | Calc become_user
  ansible.builtin.set_fact:
    _install_group_as_user: >-
      {{ system_users[user_idx].id
      if (group.location is defined and group.location == 'user') }}

- name: Install Group | Calc package overides by name
  ansible.builtin.set_fact:
    _package_overrides_by_name: >
      {{ overrides | install_overrides_by_name(os_family, distribution) }}
  changed_when: false

- name: Install Group | Packages
  when: group.package is defined
  block:
    - name: Install Group | Package | Calc packages to install
      ansible.builtin.set_fact:
        _packages: >-
          {{ group.package |
          packages(_package_overrides_by_name) }}
      changed_when: false

    - name: Install Group | Package | Packages to install
      when: _packages | length > 0
      block:
        - name: Debug packages
          ansible.builtin.debug:
            msg:
              - Packages to install
              - "{{ _packages }}"
            verbosity: 1

        - name: Install Group | Package | Install packages
          ansible.builtin.package:
            name: "{{ _packages }}"
            state: present

        - name: Install Group | Package | Update output_config
          when: user_idx == -1
          ansible.utils.update_fact:
            updates:
              - path: output_config.system.packages
                value: >
                  {{ (output_config.system.packages + _packages) | unique }}
          register: _updated_fact
          changed_when: false

        - name: Install Group | Package | Set output_config
          when: user_idx == -1
          ansible.builtin.set_fact:
            output_config: "{{ _updated_fact.output_config }}"
          changed_when: false

        - name: Install Group | Package | Update output_config
          when: user_idx != -1
          ansible.utils.update_fact:
            updates:
              - path: output_config.user[{{ user_idx }}].packages
                value: >
                  {{ (output_config.user[user_idx].packages + _packages)
                  | unique }}
          register: _updated_fact
          changed_when: false

        - name: Install Group | Package | Set output_config
          when: user_idx != -1
          ansible.builtin.set_fact:
            output_config: "{{ _updated_fact.output_config }}"
          changed_when: false

    - name: Install Group | Role | Calc roles to use to install packages
      ansible.builtin.set_fact:
        _roles: "{{ group.package | roles(_package_overrides_by_name) }}"
      changed_when: false

    - name: Install Group | Role | Install using roles
      when: _roles | length > 0
      block:
        - name: Debug roles
          ansible.builtin.debug:
            msg:
              - Roles to install
              - "{{ _roles }}"
            verbosity: 1

        - name: "Install Group | Role | Install {{ role_item }}"
          ansible.builtin.include_role:
            name: "{{ role_item }}"
          loop: "{{ _roles }}"
          loop_control:
            loop_var: role_item
          # Workaround https://github.com/ansible/ansible/issues/19084
          vars:
            _vars: >
              {{ _package_overrides_by_name[role_item]['vars'] |
              default(omit, True) }}


- name: Install Group | Pip
  block:
    - name: Install Group | Pip | Install with pip
      become_user: "{{ _install_group_as_user | default(omit, True) }}"
      ansible.builtin.pip:
        name: "{{ group.pip }}"
        state: present
        extra_args: >-
          {{ (group.location is defined and group.location == 'user') |
          ternary('--user', omit) }}
      register: _pip_output
      failed_when: >
        _pip_output.failed and
        not 'Requirement already satisfied' in _pip_output.stdout
      environment:
        PYTHON_KEYRING_BACKEND: keyring.backends.null.Keyring

    - name: Install Group | Pip | Update output_config system fact
      block:
        - name: Install Group | Pip | Update system output_config
          ansible.utils.update_fact:
            updates:
              - path: output_config.system.packages
                value: >-
                  {{ (output_config.system.packages + group.pip) | unique }}
          register: _updated_fact
          changed_when: false

        - name: Install Group | Pip | Set output_config
          ansible.builtin.set_fact:
            output_config: "{{ _updated_fact.output_config }}"
          changed_when: false
      when: user_idx == -1

    - name: Install Group | Pip | Update output_config user fact
      block:
        - name: Install Group | Pip | Update user output_config
          ansible.utils.update_fact:
            updates:
              - path: "output_config.user[{{ user_idx }}].packages"
                value: >-
                  {{ (output_config.user[user_idx].packages + group.pip) |
                  unique }}
          register: _updated_fact
          changed_when: false

        - name: Install Group | Pip | Set output_config
          ansible.builtin.set_fact:
            output_config: "{{ _updated_fact.output_config }}"
          changed_when: false
      when: user_idx != -1

  when: group.pip is defined and group.pip | length > 0


- name: Install Group | PipX
  block:
    - name: Install Group | PipX | Install
      # become_user: "{{ _install_group_as_user }}"
      community.general.pipx:
        name: "{{ pipx_item }}"
        # include_deps: true
      loop: "{{ group.pipx }}"
      loop_control:
        loop_var: pipx_item
      register: _pipx_output
      # failed_when: >
      #   _pipx_output.stderr is defined and
      #   not "No matching distribution found for " ~ pipx_item in
      #   _pipx_output.stderr

    - name: Install Group | PipX | User | Update output_config
      block:
        - name: Install Group | PipX | User | Update output_config
          ansible.utils.update_fact:
            updates:
              - path: "output_config.user[{{ user_idx }}].packages"
                value: >
                  {{ (output_config.user[user_idx].packages + group.pipx) |
                  unique }}"
          register: _updated_fact
          changed_when: false

        - name: Install Group | PipX | User | Set output_config
          ansible.builtin.set_fact:
            output_config: "{{ _updated_fact.output_config }}"
          changed_when: false

  when: group.pipx is defined and group.pipx | length > 0


- name: Install Group | Git
  when: group.git is defined and group.git | length > 0
  ansible.builtin.git:
    repo: "{{ git_item.repo }}"
    dest: "{{ git_item.dest }}"
    version: HEAD  # noqa: git-latest
  loop: "{{ group.git }}"
  loop_control:
    loop_var: git_item


- name: Install Group | npm
  when: group.npm is defined and group.npm | length > 0
  become_user: "{{ _install_group_as_user | default(omit, True) }}"
  community.general.npm:
    name: "{{ npm_item }}"
    global: >
      {{ (group.location is defined and group.location == 'global') |
      ternary(true, omit) }}
  loop: "{{ group.npm }}"
  loop_control:
    loop_var: npm_item
