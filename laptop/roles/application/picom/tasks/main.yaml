---
- name: Picom | Get remote repository version
  ansible.builtin.command:
    cmd: "git ls-remote {{ picom_git_repo }} {{ picom_git_tag }}"  # noqa: command-instead-of-module line-length
  register: _picom_remote_version
  changed_when: false

- name: Picom | Calc remote version string
  ansible.builtin.set_fact:
    _picom_remote_version: >
      "vgit-{{ (_picom_remote_version.stdout | split | first)[:5] }}"
  changed_when: false

- name: Picom | Get current command version
  ansible.builtin.command:
    cmd: picom --version
  register: _picom_local_version
  changed_when: false
  failed_when: false

- name: Picom | Calc local version
  ansible.builtin.set_fact:
    _picom_local_version: >
      "{{ _picom_local_version.stdout if _picom_local_version.rc == 0
      else '' }}"
  changed_when: false

- name: Picom | New build required
  when: _picom_local_version != _picom_remote_version
  block:
    - name: Picom | Load os/distribution specific package list
      ansible.builtin.include_vars: "{{ lookup('first_found', params) }}"
      vars:
        params:
          files:
            - "{{ distribution }}.yaml"
            - "{{ os_family }}.yaml"
          paths:
            - "vars"

    - name: Picom | Load common pre-requisites
      ansible.builtin.include_vars: vars/common.yaml

    - name: Picom | Merge pre-requisites
      ansible.builtin.set_fact:
        _pre_reqs: >-
          {{ picom_pre_requisites |
          combine(picom_common_pre_requisites,
          list_merge='append', recursive=True) }}
      changed_when: false

    - name: Picom | Debug pre-reqs
      ansible.builtin.debug:
        msg:
          - Picom Pre-requisites
          - "{{ _pre_reqs }}"
        verbosity: 1

    - name: Picom | Install pre-requisites - os package
      ansible.builtin.package:
        name: "{{ _pre_reqs.package }}"
        state: present

    - name: Picom | Install pre-requisites - pip
      ansible.builtin.pip:
        name: "{{ _pre_reqs.pip }}"
        state: present

    - name: Picom | Create temporary directory
      ansible.builtin.tempfile:
        state: directory
        suffix: picom
      register: _picom_tmp_directory
      changed_when: false
      notify: Delete temporary picom build directory

    - name: Picom | Get sources
      ansible.builtin.git:
        repo: "{{ picom_git_repo }}"
        dest: "{{ _picom_tmp_directory }}"
        version: "{{ picom_git_tag }}"
      changed_when: false

    - name: Picom | Create ninja build script
      ansible.builtin.command:
        cmd: meson --buildtype=release . build
        chdir: "{{ _picom_tmp_directory }}"
      register: _picom_meson
      changed_when: >
        not 'Directory already configured' in _picom_meson.stdout
        and _picom_meson.rc == 0
      failed_when: _picom_meson.rc > 0

    - name: Picom | Run ninja build script
      ansible.builtin.command:
        cmd: ninja -C build
        chdir: "{{ _picom_tmp_directory }}"
      register: _picom_build
      changed_when: >
        not 'no work to do' in _picom_build.stdout
        and _picom_build.rc == 0
      failed_when: _picom_build.rc > 0

    - name: Picom | Install picom
      ansible.builtin.command:
        cmd: ninja -C build install
        chdir: "{{ _picom_tmp_directory }}"
      register: _picom_install
      changed_when: _picom_install.rc == 0
      failed_when: _picom_install.rc > 0
