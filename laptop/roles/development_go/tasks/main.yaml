---
- name: Get filename prefix with latest version
  ansible.builtin.set_fact:
    _go_install_version: "{{ lookup('url', _go_version_url, split_lines=False) }}"
  changed_when: false
  when: go.version == "latest"

- name: Get filename prefix with fixed version
  ansible.builtin.set_fact:
    _go_install_version: go{{ version }}
  changed_when: false
  when: go.version != "latest"

- name: Try to get current go version installed
  ansible.builtin.command: "{{ _go_bin_path }}/go version"
  register: _go_version
  changed_when: false
  failed_when: false

- name: Set current_version var to the current
  ansible.builtin.set_fact:
    _go_current_version: "{{ _go_version.stdout.split(' ')[2] }}"
  changed_when: false
  when: _go_version.rc == 0

- name: Download and extract the archive {{ _go_archive_name }}
  ansible.builtin.unarchive:
    src: "{{ _go_download_url }}"
    dest: "{{ _go_install_path }}"
    mode: 0755
    owner: "{{ _go_mode }}"
    group: "{{ _go_mode }}"
    remote_src: true
  when: _go_current_version != _go_install_version

- name: Compute configfiles with additional path
  ansible.utils.update_fact:
    updates:
      - path: configfiles.path
        value: "{{ configfiles.path + [_go_bin_path] }}"
      - path: configfiles.envvars
        value: "{{ configfiles.envvars | combine({'GOPATH': _go_install_path + '/go'}) }}"
  register: _updated_fact
  changed_when: false

- name: Set configfiles
  ansible.builtin.set_fact:
    configfiles: "{{ _updated_fact.configfiles }}"
  changed_when: false
